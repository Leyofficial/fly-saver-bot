from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from common.common import AddFlight, handle_city_selection
from filters.chat_types import ChatTypeFilter
from keyboards import reply
from keyboards.reply import MyCallback, get_summary_data_kb
from requests_to_api.get_flight_info import get_summary_results

my_flight_router = Router()
my_flight_router.message.filter(ChatTypeFilter(['private']))


@my_flight_router.callback_query(StateFilter(None), MyCallback.filter(F.foo == "search"))
async def departure_search_cmd(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤.\n"
        "–û—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–µ—Ç—å?"
    )
    await state.set_state(AddFlight.waiting_for_city)


@my_flight_router.message(StateFilter(AddFlight.waiting_for_city))
async def handle_search_text(message: types.Message, state: FSMContext):
    await handle_city_selection(
        message, state, AddFlight.departure, "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )


@my_flight_router.callback_query(StateFilter(AddFlight.departure), MyCallback.filter())
async def select_departure_city(query: types.CallbackQuery, callback_data: MyCallback, state: FSMContext):
    fromId = callback_data.foo
    await state.update_data(fromIdCode=fromId)
    await query.message.answer(f"–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–µ—Ç—å?")
    await state.set_state(AddFlight.arrival)


@my_flight_router.message(StateFilter(AddFlight.arrival))
async def handle_arrival_city(message: types.Message, state: FSMContext):
    await handle_city_selection(
        message, state, AddFlight.waiting_for_arrival_city, "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:"
    )


@my_flight_router.callback_query(StateFilter(AddFlight.waiting_for_arrival_city), MyCallback.filter())
async def select_arrival_city(query: types.CallbackQuery, callback_data: MyCallback, state: FSMContext):
    toId = callback_data.foo
    await state.update_data(toIdCode=toId)
    await query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=reply.type_trip
    )
    await state.set_state(AddFlight.type_trip)


@my_flight_router.callback_query(StateFilter(AddFlight.type_trip), MyCallback.filter())
async def select_type_trip(query: types.CallbackQuery, callback_data: MyCallback, state: FSMContext):
    trip_type = callback_data.foo
    await state.update_data(trip_type=trip_type)

    response_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–µ–∑–¥–∫–∏."
    if trip_type == 'one_way':
        response_text = "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –±–∏–ª–µ—Ç –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É ‚úàÔ∏è."
    elif trip_type == 'return_way':
        response_text = "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç ‚úàÔ∏èüîÑ."

    await query.message.answer(response_text)

    if trip_type in ['one_way', 'return_way']:
        await query.message.answer("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
        await state.set_state(AddFlight.waiting_for_adults)


@my_flight_router.message(StateFilter(AddFlight.waiting_for_adults))
async def handle_adults(message: types.Message, state: FSMContext):
    try:
        answer = int(message.text)
        await state.update_data(adults=answer)
        await state.set_state(AddFlight.departure_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


async def handle_flight_date(message: types.Message, state: FSMContext, date_type: str):
    await state.update_data(**{date_type: message.text})
    data = await state.get_data()

    if date_type == 'departure_date' and data.get('trip_type') == 'return_way':
        await state.set_state(AddFlight.arrival_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    else:
        await message.answer("üõ´ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã –∏—â–µ–º —Ä–µ–π—Å—ã –¥–ª—è –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. ‚åõ")
        if data:
            res = get_summary_results(data)
            if res and res.get('status') and res.get('data'):
                flight_count = res['data']['context']['totalResults']
                await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤: {flight_count} ‚úàÔ∏è")
                await message.answer("–í–æ—Ç –∏ –æ–Ω–∏:", reply_markup=get_summary_data_kb(res['data']))
            else:
                await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ. /start')
        await state.clear()


@my_flight_router.callback_query(MyCallback.filter())
async def handle_selected_flight(query: types.CallbackQuery, callback_data: MyCallback):
    text = callback_data.foo
    await query.message.answer(text)


@my_flight_router.message(StateFilter(AddFlight.departure_date))
async def enter_departure_date(message: types.Message, state: FSMContext):
    await handle_flight_date(message, state, 'departure_date')


@my_flight_router.message(StateFilter(AddFlight.arrival_date))
async def enter_arrival_date(message: types.Message, state: FSMContext):
    await handle_flight_date(message, state, 'arrival_date')
